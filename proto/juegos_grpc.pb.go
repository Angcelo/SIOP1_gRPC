// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JuegoListServiceClient is the client API for JuegoListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JuegoListServiceClient interface {
	Juego1(ctx context.Context, in *JuegoReq, opts ...grpc.CallOption) (*JuegoResp, error)
	Juego2(ctx context.Context, in *JuegoReq, opts ...grpc.CallOption) (*JuegoResp, error)
	Juego3(ctx context.Context, in *JuegoReq, opts ...grpc.CallOption) (*JuegoResp, error)
}

type juegoListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJuegoListServiceClient(cc grpc.ClientConnInterface) JuegoListServiceClient {
	return &juegoListServiceClient{cc}
}

func (c *juegoListServiceClient) Juego1(ctx context.Context, in *JuegoReq, opts ...grpc.CallOption) (*JuegoResp, error) {
	out := new(JuegoResp)
	err := c.cc.Invoke(ctx, "/grpc.JuegoListService/Juego1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *juegoListServiceClient) Juego2(ctx context.Context, in *JuegoReq, opts ...grpc.CallOption) (*JuegoResp, error) {
	out := new(JuegoResp)
	err := c.cc.Invoke(ctx, "/grpc.JuegoListService/Juego2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *juegoListServiceClient) Juego3(ctx context.Context, in *JuegoReq, opts ...grpc.CallOption) (*JuegoResp, error) {
	out := new(JuegoResp)
	err := c.cc.Invoke(ctx, "/grpc.JuegoListService/Juego3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JuegoListServiceServer is the server API for JuegoListService service.
// All implementations must embed UnimplementedJuegoListServiceServer
// for forward compatibility
type JuegoListServiceServer interface {
	Juego1(context.Context, *JuegoReq) (*JuegoResp, error)
	Juego2(context.Context, *JuegoReq) (*JuegoResp, error)
	Juego3(context.Context, *JuegoReq) (*JuegoResp, error)
	mustEmbedUnimplementedJuegoListServiceServer()
}

// UnimplementedJuegoListServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJuegoListServiceServer struct {
}

func (UnimplementedJuegoListServiceServer) Juego1(context.Context, *JuegoReq) (*JuegoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Juego1 not implemented")
}
func (UnimplementedJuegoListServiceServer) Juego2(context.Context, *JuegoReq) (*JuegoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Juego2 not implemented")
}
func (UnimplementedJuegoListServiceServer) Juego3(context.Context, *JuegoReq) (*JuegoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Juego3 not implemented")
}
func (UnimplementedJuegoListServiceServer) mustEmbedUnimplementedJuegoListServiceServer() {}

// UnsafeJuegoListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JuegoListServiceServer will
// result in compilation errors.
type UnsafeJuegoListServiceServer interface {
	mustEmbedUnimplementedJuegoListServiceServer()
}

func RegisterJuegoListServiceServer(s grpc.ServiceRegistrar, srv JuegoListServiceServer) {
	s.RegisterService(&JuegoListService_ServiceDesc, srv)
}

func _JuegoListService_Juego1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JuegoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JuegoListServiceServer).Juego1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.JuegoListService/Juego1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JuegoListServiceServer).Juego1(ctx, req.(*JuegoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JuegoListService_Juego2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JuegoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JuegoListServiceServer).Juego2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.JuegoListService/Juego2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JuegoListServiceServer).Juego2(ctx, req.(*JuegoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JuegoListService_Juego3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JuegoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JuegoListServiceServer).Juego3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.JuegoListService/Juego3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JuegoListServiceServer).Juego3(ctx, req.(*JuegoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// JuegoListService_ServiceDesc is the grpc.ServiceDesc for JuegoListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JuegoListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.JuegoListService",
	HandlerType: (*JuegoListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Juego1",
			Handler:    _JuegoListService_Juego1_Handler,
		},
		{
			MethodName: "Juego2",
			Handler:    _JuegoListService_Juego2_Handler,
		},
		{
			MethodName: "Juego3",
			Handler:    _JuegoListService_Juego3_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "juegos.proto",
}
